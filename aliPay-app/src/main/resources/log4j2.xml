<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="INFO" monitorInterval="30">
    <!--自定义一些常量，之后使用${变量名}引用-->
    <Properties>
        <Property name="LOG_HOME">${sys:app.log.path}</Property>
        <Property name="LOG_NAME">ali-pay-app</Property>
    </Properties>
    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout  pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%X{mdcData}] [%t] %-5level %logger{36} - %msg%n"/>
        </console>
        <!-- ${sys:user.home} :项目路径 -->
        <RollingRandomAccessFile name="logfile" fileName="${LOG_HOME}/${LOG_NAME}.log"
            filePattern="${LOG_HOME}/${date:yyyy-MM}/${LOG_NAME}-%d{yyyy-MM-dd_HH}.log">
            <!--ThresholdFilter :日志输出过滤-->
            <!--level="info" :日志级别,onMatch="ACCEPT" :级别在info之上则接受,onMismatch="DENY" :级别在info之下则拒绝-->
            <!--<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <PatternLayout  pattern="%d{yyyy-MM-dd HH:mm:ss:SSS} [%X{mdcData}] [%t] %-5level %logger{36} - %msg%n"/>
            <Policies>
                <!--间隔时间单位 1小时生成一次-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
            <DefaultRolloverStrategy max="168"/>
        </RollingRandomAccessFile>

    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"></logger>
        <logger name="org.mybatis" level="INFO"></logger>
        <root level="INFO">
            <appender-ref ref="console"/>
            <appender-ref ref="logfile"/>
        </root>
        <!--AsyncLogger :异步日志,LOG4J有三种日志模式,全异步日志,混合模式,同步日志,性能从高到底,线程越多效率越高,也可以避免日志卡死线程情况发生-->
        <!--additivity="false" : additivity设置事件是否在root logger输出，为了避免重复输出，可以在Logger 标签下设置additivity为”false”-->
        <!--<AsyncLogger name="AsyncLogger" level="trace" includeLocation="true" additivity="false">-->
        <!--<appender-ref ref="RollingFileError"/>-->
        <!--</AsyncLogger>-->
    </loggers>
</configuration>